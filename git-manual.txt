;//git use  2015年06月04日
;// from http://www.liaoxuefeng.com/

;[创建repository]-----------------------------
mkdir firstgit;
cd firstgit;
pwd; //显示当前目录

git init; // 初始化
;[提交commit]-----------------------------
git add readme.txt;
git commit -m "wrote a readme file";

git status; //查看仓库当前状态
git diff readme.txt;  //查看修改内容

;[版本管理]-----------------------------
git log;  //查看每次的commit
git log --pretty=oneline; //显示单行信息

HEAD; //当前版本
HEAD^; //上一版本
HEAD^^; //上上版本
HEAD~100; //往上100个版本

git reset --hard HEAD^;  //回退到上一版本
git reset --hard 3628164; //前进到现代版本，使用commit id前几位,SHA1编码
git reflog; //记录之前的回退操作

;wd - working directory; //工作区
;.git - repository; //版本库，包含stage，master

git checkout -- readme.txt; //撤销工作区修改,回到最近一次add 或commit状态
git reset HEAD readme.txt; //unstage, put it back to wd;

rm test.txt; //删除本地文件
git rm test.txt; //从版本库中删除
git commit -m "remove test.txt"; //commit 提交删除
git checkout -- test.txt; //删错了，恢复文件

;[远程仓库]-----------------------------
ssh-keygen -t rsa -C "email"; //SSH加密，创建SSH Key, 生成.ssh目录，id_rsa,id_rsa.pub文件

git remote add origin git@github.com:kyleyang02/firstgit.git; //将本地仓库推送至github，克隆仓库；
git remote add origin git@server-name:path/repo-name.git;
git push -u origin master; //推送内容，-u为首次推送；
git push origin master; //之后的提交,master->origin;

git clone git@github.com:kyleyang02/gitskills.git; //从远程库克隆至本地

;[分支管理]-----------------------------
git checkout -b dev; //创建分支,-b表示创建并切换,等同如下2个操作;
	git branch dev;
	git checkout dev;	
git branch; //查看分支
git checkout master; //切回master
git merge dev; //合并dev分支到当前分支;
git branch -d dev; //删除dev分支;

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

git log --graph --pretty=oneline --abbrev-commit; //图示分支commit内容;
git merge --no-ff -m "merge with no-ff" dev; //no fast-forward,平时merge到dev分支

;bug 分支
git stash; //存储现场，去修复bug;
git stash list; //列表
git stash pop;
	git stash apply;
	git stash drop;
git stash apply stash@{0}; //应用于多个stash恢复;

;feature 分支
git checkout -b feature-vulcan; //新建feature分支
git branch -D feature-vulcan; //强制销毁未被merge的分支
;多人协作
git checkout -b dev origin/dev; //同时创建dev分支;
git pull; //遇到提交与同事提交的冲突，先把最新提交origin/dev抓下来，本地合并，解决冲突，推送;
git branch --set-upstream dev origin/dev; //pull失败，指定本地分支与远程分支;

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

git remote -v; //查看远程库信息;

;[标签管理]-----------------------------
git tag <name>; //标记版本
git log --pretty=oneline --abbrev-commit;//查询分支历史
git tag v0.9 6224937; //在指定分支打标签;
git tag; //查看标签,按字母顺序;
git show <tagname>; //查看标签对应的信息;
git tag -a v0.1 -m "version 0.1 released" 3628164; //创建带说明的标签,-a标签名,-m说明文字;
git tag -s v0.2 -m "signed version 0.2 released" fec145a; //-s用私钥签名,PGP签名，需先安装gpg;

git tag -d v0.1; //删除标签;
git push origin v0.1; //推送标签至远程;
git push origin --tags; //一次性推送尚未推送的本地标签;
git tag -d v0.9; //删除远程标签需先删除本地标签;
git push origin :refs/tags/v0.9; //删除远程标签;

;[自定义git]-----------------------------
git config --global color.ui true; //显示颜色;
.gitignore; //用于自动忽略文件,系统自动生成,文件自动生成,敏感信息，用git status检验;
git config --global alias.st status; //别名
git config --global alias.last ‘log -l’; //last commit;
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"; //log显示;

.git/config; //配置文件位置;
git config --global --unset alias.st; //取消别名;
git config --get-regexp alias; //查看alias list;
git config --list | grep alias; //查看alias list;

;搭建git服务器
sudo apt-get install git; //1. install git
sudo adduser git; //2. create git user
; //3. collect id_rsa.pub, put into /home/git/.ssh/authorized_keys
sudo git init --bare sample.git; //4. initial git, suppose /srv/sample.git, under /srv
	sudo chown -R git:git sample.git; //change owner to git, only for share, not edit.
git:x:1001:1001:,,,:/home/git:/bin/bash; //5.no shell login, edit /etc/passwd, find it
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell; //change to this. now can use git by ssh
git clone git@server:/srv/sample.git; //6. clone server repository;

Gitosis; // if lot of keys use gitosis to manage keys;
Gitolite; // for authority management like SVN;